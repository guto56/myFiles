Para criar um **compressor de PDF** sem utilizar nenhuma API externa e apenas com **Ghostscript**, você precisará configurar um ambiente onde o **Ghostscript** seja utilizado para processar e comprimir arquivos PDF diretamente no seu computador ou servidor. Vou te guiar por todo o processo, incluindo o **passo a passo de instalação**, a criação de um **componente frontend (HTML)** e o **backend em Python**, sem dependências externas.

### Passo 1: Instalar o Ghostscript

O **Ghostscript** será o responsável pela compressão do arquivo PDF. Siga os passos abaixo para instalá-lo:

#### 1.1. Instalar o Ghostscript

##### No Windows:

1. Acesse a página oficial do [Ghostscript](https://www.ghostscript.com/download/gsdnld.html).
2. Baixe a versão adequada para o seu sistema (32 ou 64 bits).
3. Execute o arquivo de instalação e siga os passos para concluir a instalação.
4. Durante a instalação, marque a opção **Adicionar ao PATH** para facilitar o uso do Ghostscript no terminal.

##### No Ubuntu/Debian (Linux):

1. Abra o terminal e execute os seguintes comandos para instalar o **Ghostscript**:
   ```bash
   sudo apt update
   sudo apt install ghostscript
   ```

##### No macOS (usando Homebrew):

1. Se você tem o **Homebrew** instalado, use o seguinte comando:
   ```bash
   brew install ghostscript
   ```

#### 1.2. Verificar a instalação:

Abra o terminal ou prompt de comando e execute:

```bash
gs --version
```

Se o Ghostscript foi instalado corretamente, você verá a versão instalada do Ghostscript.

### Passo 2: Criar o Frontend em HTML

Agora, crie uma página HTML simples para permitir que os usuários façam upload de seus arquivos PDF.

#### 2.1. Código HTML para o formulário de upload

```html
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Compressor de PDF</title>
</head>
<body>
    <h2>Comprimir PDF</h2>
    <form action="/compress" method="POST" enctype="multipart/form-data">
        <label for="file">Selecione o arquivo PDF para compressão:</label><br><br>
        <input type="file" name="file" id="file" required><br><br>
        <input type="submit" value="Comprimir PDF">
    </form>
</body>
</html>
```

Este HTML irá permitir que o usuário faça upload de um arquivo PDF para compressão.

### Passo 3: Criar o Backend em Python com Flask

O backend será responsável por receber o arquivo, chamar o Ghostscript para comprimir o PDF e devolver o arquivo comprimido para o usuário.

#### 3.1. Instalar o Flask

No seu ambiente Python, instale o **Flask** (caso não tenha instalado):

```bash
pip install Flask
```

#### 3.2. Código Python (Flask + Ghostscript)

Crie um arquivo Python (`app.py`) com o seguinte código:

```python
from flask import Flask, request, send_file
import os
import subprocess

app = Flask(__name__)

# Caminho para o diretório onde os PDFs serão salvos
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Configuração do Flask para lidar com o upload de arquivos
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/')
def index():
    return open("index.html").read()  # Serve o HTML de upload

@app.route('/compress', methods=['POST'])
def compress_pdf():
    # Verifica se o arquivo foi enviado
    if 'file' not in request.files:
        return "Nenhum arquivo enviado", 400

    file = request.files['file']
    
    if file.filename == '':
        return "Nenhum arquivo selecionado", 400

    # Salva o arquivo PDF enviado
    input_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
    file.save(input_path)

    # Caminho do arquivo comprimido
    output_path = os.path.join(app.config['UPLOAD_FOLDER'], 'compressed_' + file.filename)

    # Comprimir o PDF usando o Ghostscript
    try:
        command = [
            'gs', '-sDEVICE=pdfwrite', '-dCompatibilityLevel=1.4', 
            '-dPDFSETTINGS=/ebook', '-dNOPAUSE', '-dQUIET', 
            '-dBATCH', f'-sOutputFile={output_path}', input_path
        ]
        subprocess.run(command, check=True)  # Executa o comando Ghostscript

        # Envia o arquivo comprimido de volta ao usuário
        return send_file(output_path, as_attachment=True)

    except subprocess.CalledProcessError as e:
        return f"Erro ao comprimir o PDF: {str(e)}", 500

if __name__ == '__main__':
    app.run(debug=True)
```

### Explicação do código Python:

- **Flask**: Usado para criar o servidor web e lidar com os uploads.
- **Ghostscript**: Usado via o comando `subprocess.run` para chamar o Ghostscript e realizar a compressão.
- **Compressão com Ghostscript**: O comando `gs` é configurado para comprimir o PDF usando a configuração `/ebook`, que é uma opção equilibrada entre compressão e qualidade. O comando pode ser ajustado para diferentes níveis de compressão.

### Passo 4: Testando o Sistema

#### 4.1. Estrutura de arquivos

Certifique-se de que a estrutura do projeto esteja assim:

```
/seu-projeto
│
├── app.py                # Código Python (Flask)
├── index.html            # Código HTML (Frontend)
└── uploads/              # Pasta para armazenar arquivos PDF
```

#### 4.2. Rodando o Flask

Execute o servidor Flask com o seguinte comando:

```bash
python app.py
```

Isso iniciará o servidor localmente. Acesse o formulário de upload no navegador em:

```
http://127.0.0.1:5000/
```

Faça o upload de um arquivo PDF e o servidor irá processá-lo, gerar uma versão comprimida e permitir o download do arquivo comprimido.

### Passo 5: Testes

- Faça o upload de vários arquivos e verifique a redução do tamanho.
- Teste diferentes níveis de compressão, alterando o parâmetro `-dPDFSETTINGS` (exemplo: `/screen`, `/ebook`, etc.).

### Considerações Finais

- **Ghostscript** é uma ferramenta poderosa e pode ser configurada para diferentes níveis de compressão.
- Esse método não depende de nenhuma API externa e funciona completamente offline.
- **Flask** oferece uma maneira simples de configurar um servidor para o processo de compressão, mas você pode adicionar mais funcionalidades, como autenticação ou processamento em massa, conforme necessário.

Agora você tem um compressor de PDFs funcional, sem a necessidade de APIs externas, utilizando apenas **Ghostscript**, **Python** e **Flask**!